name: Docking Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  docking-integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-docking-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-docking-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio

    - name: Create mock docking tools
      run: |
        mkdir -p bin
        echo '#!/bin/bash' > bin/vina
        echo 'echo "Mock Vina output"' >> bin/vina
        echo 'echo "-----+------------+----------+----------+"' >> bin/vina
        echo 'echo "   # |   MODE    |   AFFINITY | RMSD LOWER | RMSD UPPER"' >> bin/vina
        echo 'echo "-----+------------+----------+----------+----------+"' >> bin/vina
        echo 'echo "    1 |      1    |    -8.1   |    0.000   |    0.000"' >> bin/vina
        echo 'echo "-----+------------+----------+----------+----------+"' >> bin/vina
        chmod +x bin/vina
        
        echo '#!/bin/bash' > bin/gnina
        echo 'echo "Mock GNINA output"' >> bin/gnina
        echo 'echo "-----+------------+----------+----------+"' >> bin/gnina
        echo 'echo "   # |   MODE    |   AFFINITY | RMSD LOWER | RMSD UPPER"' >> bin/gnina
        echo 'echo "-----+------------+----------+----------+----------+"' >> bin/gnina
        echo 'echo "    1 |      1    |    -7.5   |    0.000   |    0.000"' >> bin/gnina
        echo 'echo "-----+------------+----------+----------+----------+"' >> bin/gnina
        chmod +x bin/gnina

    - name: Run docking-specific tests
      run: |
        python -m pytest tests/ -v -m "integration" --tb=short

    - name: Test batch pipeline
      run: |
        python -m pytest tests/test_integration.py::TestIntegration::test_complete_pipeline_flow -v

    - name: Test PDBQT conversion
      run: |
        python -m pytest tests/test_integration.py::TestIntegration::test_pipeline_with_pdbqt_conversion -v

    - name: Test results parsing
      run: |
        python -m pytest tests/test_integration.py::TestIntegration::test_pipeline_with_results_parsing -v

    - name: Test configuration system
      run: |
        python -m pytest tests/test_integration.py::TestIntegration::test_configuration_integration -v

    - name: Run all unit tests
      run: |
        python -m pytest tests/ -v -m "unit" --tb=short

    - name: Generate test coverage report
      run: |
        python -m pytest tests/ --cov=scripts --cov=utils --cov-report=html:htmlcov --cov-report=term-missing

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  docking-tools-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-tools-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-tools-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-mock

    - name: Test docking results parser
      run: |
        python -m pytest tests/test_docking_results_parser.py -v

    - name: Test PDBQT conversion
      run: |
        python -m pytest tests/test_pdbqt_conversion.py -v

    - name: Test configuration system
      run: |
        python -m pytest tests/test_config.py -v

    - name: Test with real test files
      run: |
        # Test with existing test files
        python -c "
        import os
        from pathlib import Path
        
        # Check if test files exist
        test_files = ['test_protein.pdb', 'test_ligand.sdf']
        for file in test_files:
            if os.path.exists(file):
                print(f'✓ {file} exists')
            else:
                print(f'✗ {file} missing')
        "

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.10-perf-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.10-perf-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        python -m pytest tests/ -v --benchmark-only --benchmark-skip

    - name: Test memory usage
      run: |
        python -c "
        import psutil
        import os
        
        process = psutil.Process(os.getpid())
        print(f'Memory usage: {process.memory_info().rss / 1024 / 1024:.2f} MB')
        " 