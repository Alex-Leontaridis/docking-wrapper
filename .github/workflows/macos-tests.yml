name: macOS Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install system dependencies
      run: |
        # Install Homebrew if not available
        if ! command -v brew &> /dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install required system packages
        brew install libffi openssl

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -r requirements.txt
        pip3 install pytest pytest-cov pytest-mock pytest-asyncio

    - name: Create mock docking tools
      run: |
        mkdir -p bin
        echo '#!/bin/bash' > bin/vina
        echo 'echo "Mock Vina output"' >> bin/vina
        echo 'echo "-----+------------+----------+----------+"' >> bin/vina
        echo 'echo "   # |   MODE    |   AFFINITY | RMSD LOWER | RMSD UPPER"' >> bin/vina
        echo 'echo "-----+------------+----------+----------+----------+"' >> bin/vina
        echo 'echo "    1 |      1    |    -8.1   |    0.000   |    0.000"' >> bin/vina
        echo 'echo "-----+------------+----------+----------+----------+"' >> bin/vina
        chmod +x bin/vina
        
        echo '#!/bin/bash' > bin/gnina
        echo 'echo "Mock GNINA output"' >> bin/gnina
        echo 'echo "-----+------------+----------+----------+"' >> bin/gnina
        echo 'echo "   # |   MODE    |   AFFINITY | RMSD LOWER | RMSD UPPER"' >> bin/gnina
        echo 'echo "-----+------------+----------+----------+----------+"' >> bin/gnina
        echo 'echo "    1 |      1    |    -7.5   |    0.000   |    0.000"' >> bin/gnina
        echo 'echo "-----+------------+----------+----------+----------+"' >> bin/gnina
        chmod +x bin/gnina

    - name: Run tests
      run: |
        python3 -m pytest tests/ -v --cov=scripts --cov=utils --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        python3 run_tests.py

    - name: Test specific docking functionality
      run: |
        python3 -m pytest tests/test_integration.py -v -m "integration"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: macos
        name: codecov-macos
        fail_ci_if_error: false

  lint-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.10]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-lint-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-lint-

    - name: Install linting dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install black flake8 mypy

    - name: Run Black (code formatting check)
      run: |
        black --check --diff scripts/ tests/ utils/

    - name: Run Flake8 (code style check)
      run: |
        flake8 scripts/ tests/ utils/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run MyPy (type checking)
      run: |
        mypy scripts/ utils/ --ignore-missing-imports --no-strict-optional

  security-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.10]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-security-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-security-

    - name: Install security dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install bandit safety

    - name: Run Bandit (security linting)
      run: |
        bandit -r scripts/ utils/ -f json -o bandit-report-macos.json || true

    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report-macos.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-macos
        path: |
          bandit-report-macos.json
          safety-report-macos.json 